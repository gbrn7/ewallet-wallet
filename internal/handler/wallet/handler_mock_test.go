// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package wallet is a generated GoMock package.
package wallet

import (
	context "context"
	models "ewallet-wallet/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockService) Create(ctx context.Context, wallet *models.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, wallet)
}

// CreateWalletLink mocks base method.
func (m *MockService) CreateWalletLink(ctx context.Context, clientSource string, req *models.WalletLink) (*models.WalletStructOTP, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWalletLink", ctx, clientSource, req)
	ret0, _ := ret[0].(*models.WalletStructOTP)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWalletLink indicates an expected call of CreateWalletLink.
func (mr *MockServiceMockRecorder) CreateWalletLink(ctx, clientSource, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWalletLink", reflect.TypeOf((*MockService)(nil).CreateWalletLink), ctx, clientSource, req)
}

// CreditBalance mocks base method.
func (m *MockService) CreditBalance(ctx context.Context, userID uint64, req models.TransactionRequest) (models.BalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreditBalance", ctx, userID, req)
	ret0, _ := ret[0].(models.BalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreditBalance indicates an expected call of CreditBalance.
func (mr *MockServiceMockRecorder) CreditBalance(ctx, userID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreditBalance", reflect.TypeOf((*MockService)(nil).CreditBalance), ctx, userID, req)
}

// DebitBalance mocks base method.
func (m *MockService) DebitBalance(ctx context.Context, userID uint64, req models.TransactionRequest) (models.BalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DebitBalance", ctx, userID, req)
	ret0, _ := ret[0].(models.BalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DebitBalance indicates an expected call of DebitBalance.
func (mr *MockServiceMockRecorder) DebitBalance(ctx, userID, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebitBalance", reflect.TypeOf((*MockService)(nil).DebitBalance), ctx, userID, req)
}

// ExGetBalance mocks base method.
func (m *MockService) ExGetBalance(ctx context.Context, walletID int) (models.BalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExGetBalance", ctx, walletID)
	ret0, _ := ret[0].(models.BalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExGetBalance indicates an expected call of ExGetBalance.
func (mr *MockServiceMockRecorder) ExGetBalance(ctx, walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExGetBalance", reflect.TypeOf((*MockService)(nil).ExGetBalance), ctx, walletID)
}

// ExternalTransaction mocks base method.
func (m *MockService) ExternalTransaction(ctx context.Context, req models.ExternalTransactionRequest) (models.BalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExternalTransaction", ctx, req)
	ret0, _ := ret[0].(models.BalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExternalTransaction indicates an expected call of ExternalTransaction.
func (mr *MockServiceMockRecorder) ExternalTransaction(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExternalTransaction", reflect.TypeOf((*MockService)(nil).ExternalTransaction), ctx, req)
}

// GetBalance mocks base method.
func (m *MockService) GetBalance(ctx context.Context, userID uint64) (models.BalanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, userID)
	ret0, _ := ret[0].(models.BalanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockServiceMockRecorder) GetBalance(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockService)(nil).GetBalance), ctx, userID)
}

// GetWalletHistory mocks base method.
func (m *MockService) GetWalletHistory(ctx context.Context, userID uint64, param models.WalletHistoryParam) ([]models.WalletTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletHistory", ctx, userID, param)
	ret0, _ := ret[0].([]models.WalletTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletHistory indicates an expected call of GetWalletHistory.
func (mr *MockServiceMockRecorder) GetWalletHistory(ctx, userID, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletHistory", reflect.TypeOf((*MockService)(nil).GetWalletHistory), ctx, userID, param)
}

// WalletLinkConfirmation mocks base method.
func (m *MockService) WalletLinkConfirmation(ctx context.Context, walletID int, clientSource, otp string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletLinkConfirmation", ctx, walletID, clientSource, otp)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalletLinkConfirmation indicates an expected call of WalletLinkConfirmation.
func (mr *MockServiceMockRecorder) WalletLinkConfirmation(ctx, walletID, clientSource, otp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletLinkConfirmation", reflect.TypeOf((*MockService)(nil).WalletLinkConfirmation), ctx, walletID, clientSource, otp)
}

// WalletUnlink mocks base method.
func (m *MockService) WalletUnlink(ctx context.Context, walletID int, clientSource string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WalletUnlink", ctx, walletID, clientSource)
	ret0, _ := ret[0].(error)
	return ret0
}

// WalletUnlink indicates an expected call of WalletUnlink.
func (mr *MockServiceMockRecorder) WalletUnlink(ctx, walletID, clientSource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WalletUnlink", reflect.TypeOf((*MockService)(nil).WalletUnlink), ctx, walletID, clientSource)
}
