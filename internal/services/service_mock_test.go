// Code generated by MockGen. DO NOT EDIT.
// Source: i_wallet_repository.go

// Package services is a generated GoMock package.
package services

import (
	context "context"
	models "ewallet-wallet/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIWalletRepo is a mock of IWalletRepo interface.
type MockIWalletRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIWalletRepoMockRecorder
}

// MockIWalletRepoMockRecorder is the mock recorder for MockIWalletRepo.
type MockIWalletRepoMockRecorder struct {
	mock *MockIWalletRepo
}

// NewMockIWalletRepo creates a new mock instance.
func NewMockIWalletRepo(ctrl *gomock.Controller) *MockIWalletRepo {
	mock := &MockIWalletRepo{ctrl: ctrl}
	mock.recorder = &MockIWalletRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWalletRepo) EXPECT() *MockIWalletRepoMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockIWalletRepo) CreateWallet(ctx context.Context, wallet *models.Wallet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", ctx, wallet)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockIWalletRepoMockRecorder) CreateWallet(ctx, wallet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockIWalletRepo)(nil).CreateWallet), ctx, wallet)
}

// CreateWalletTrx mocks base method.
func (m *MockIWalletRepo) CreateWalletTrx(ctx context.Context, walletHistory *models.WalletTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWalletTrx", ctx, walletHistory)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWalletTrx indicates an expected call of CreateWalletTrx.
func (mr *MockIWalletRepoMockRecorder) CreateWalletTrx(ctx, walletHistory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWalletTrx", reflect.TypeOf((*MockIWalletRepo)(nil).CreateWalletTrx), ctx, walletHistory)
}

// GetWalletByID mocks base method.
func (m *MockIWalletRepo) GetWalletByID(ctx context.Context, walletID int) (models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByID", ctx, walletID)
	ret0, _ := ret[0].(models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByID indicates an expected call of GetWalletByID.
func (mr *MockIWalletRepoMockRecorder) GetWalletByID(ctx, walletID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByID", reflect.TypeOf((*MockIWalletRepo)(nil).GetWalletByID), ctx, walletID)
}

// GetWalletByUserID mocks base method.
func (m *MockIWalletRepo) GetWalletByUserID(ctx context.Context, userID uint64) (models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUserID", ctx, userID)
	ret0, _ := ret[0].(models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUserID indicates an expected call of GetWalletByUserID.
func (mr *MockIWalletRepoMockRecorder) GetWalletByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUserID", reflect.TypeOf((*MockIWalletRepo)(nil).GetWalletByUserID), ctx, userID)
}

// GetWalletHistory mocks base method.
func (m *MockIWalletRepo) GetWalletHistory(ctx context.Context, walletID, offset, limit int, transactionType string) ([]models.WalletTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletHistory", ctx, walletID, offset, limit, transactionType)
	ret0, _ := ret[0].([]models.WalletTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletHistory indicates an expected call of GetWalletHistory.
func (mr *MockIWalletRepoMockRecorder) GetWalletHistory(ctx, walletID, offset, limit, transactionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletHistory", reflect.TypeOf((*MockIWalletRepo)(nil).GetWalletHistory), ctx, walletID, offset, limit, transactionType)
}

// GetWalletLink mocks base method.
func (m *MockIWalletRepo) GetWalletLink(ctx context.Context, walletID int, clientSource string) (models.WalletLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletLink", ctx, walletID, clientSource)
	ret0, _ := ret[0].(models.WalletLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletLink indicates an expected call of GetWalletLink.
func (mr *MockIWalletRepoMockRecorder) GetWalletLink(ctx, walletID, clientSource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletLink", reflect.TypeOf((*MockIWalletRepo)(nil).GetWalletLink), ctx, walletID, clientSource)
}

// GetWalletTransactionByReference mocks base method.
func (m *MockIWalletRepo) GetWalletTransactionByReference(ctx context.Context, reference string) (models.WalletTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletTransactionByReference", ctx, reference)
	ret0, _ := ret[0].(models.WalletTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletTransactionByReference indicates an expected call of GetWalletTransactionByReference.
func (mr *MockIWalletRepoMockRecorder) GetWalletTransactionByReference(ctx, reference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletTransactionByReference", reflect.TypeOf((*MockIWalletRepo)(nil).GetWalletTransactionByReference), ctx, reference)
}

// InsertWalletLink mocks base method.
func (m *MockIWalletRepo) InsertWalletLink(ctx context.Context, req *models.WalletLink) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertWalletLink", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertWalletLink indicates an expected call of InsertWalletLink.
func (mr *MockIWalletRepoMockRecorder) InsertWalletLink(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertWalletLink", reflect.TypeOf((*MockIWalletRepo)(nil).InsertWalletLink), ctx, req)
}

// UpdateBalance mocks base method.
func (m *MockIWalletRepo) UpdateBalance(ctx context.Context, userID uint64, amount float64) (models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalance", ctx, userID, amount)
	ret0, _ := ret[0].(models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBalance indicates an expected call of UpdateBalance.
func (mr *MockIWalletRepoMockRecorder) UpdateBalance(ctx, userID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalance", reflect.TypeOf((*MockIWalletRepo)(nil).UpdateBalance), ctx, userID, amount)
}

// UpdateBalanceByID mocks base method.
func (m *MockIWalletRepo) UpdateBalanceByID(ctx context.Context, walletID int, amount float64) (models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBalanceByID", ctx, walletID, amount)
	ret0, _ := ret[0].(models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBalanceByID indicates an expected call of UpdateBalanceByID.
func (mr *MockIWalletRepoMockRecorder) UpdateBalanceByID(ctx, walletID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBalanceByID", reflect.TypeOf((*MockIWalletRepo)(nil).UpdateBalanceByID), ctx, walletID, amount)
}

// UpdateStatusWalletLink mocks base method.
func (m *MockIWalletRepo) UpdateStatusWalletLink(ctx context.Context, walletID int, clientSource, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusWalletLink", ctx, walletID, clientSource, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatusWalletLink indicates an expected call of UpdateStatusWalletLink.
func (mr *MockIWalletRepoMockRecorder) UpdateStatusWalletLink(ctx, walletID, clientSource, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusWalletLink", reflect.TypeOf((*MockIWalletRepo)(nil).UpdateStatusWalletLink), ctx, walletID, clientSource, status)
}
